<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        KABwcGgA4MioAPj4+ABQcFgAQHBIABwkIADwyGgA8MBoAKB4XAAgqDgAyKiQAKiQdACYcFAAUFBIAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        JgwMPz8/PwwgQwwmJgwmNT8ODg4ODg4ODh0AAAAAAAwfHx8MPww/Cgw/CgwgHz8mQkNDJiYmNQ4ODh0A
        AAAMHyQkKiI7DD8KHz8fDEMfDCYMPz8/IENDJiY1Dh0AAEFBJCQfCRMfP0IfIAwMJgwMJj8/Pz8/IEND
        JiYODgAAHh4kJCQfCgoKCgofHwofHx8MDAwMDAwMDAw/Qw4OAAAVHiQkJEFBQUFBQUEKCgoKCgoKGhoa
        CgoaCgoMNQ4AABUeJAwhJycnJycnJw8PDw8PDw8PDzw8GRkRGhoOHQAAFR4KKQ8PDycnDw8PDw8PPDw8
        PBkZGRkZGRkPJRISAAAVJAoPDycnJycnJycnDw88FBQUFBQUFBQUFBQUFBQUFBUkHw8nEREpKSkpEScn
        Dw8UFxcjIyMjIyMjIyMFBQUUFSQKJxEpKSkpOyIpKScnDxQXBRcjIwUjASMFIyMFBRQVJAonKSlEISE7
        IgYpEScPFBcXFwEBAQEBASMjIyMFFBUkJBEpRCEhIQYiIikpJw8UFwUXARcFIwEjBSMFIwUUFR4kESkh
        IQchBgZABikRDxQXFxcBFxcjIyMjIyMjIxQVHiQRKSEhIQcGBhhAKREPFBcWFhYWFhcjIwUjIyMFFBUe
        JAIiIgYHB0AYB0AiAggUFxYXIyMWFxcjIyMjIyMUFR4kEQcrKjQrKjQrKw06KBQXFhcXIxYXBRcFIwEj
        BRQ4HiQhKyszKisqKysrKxQhFDkWFxcXFhcBAQEBAQEjFDgeJBQrKysqMiorKysrFCEUORYWFhYWFxcX
        BRcBIwUUOB4kFCsrKw0qKisrKysUIRQ5OTkXFxcXFxcXFxcjIxQsHh4UKysrKyoqKysrKxQhFD09Phsw
        Cy0DNhAcLgQEFCweHhQUKysrMyorKysrFCEUPT0bGzELLQM2EBwuBAQULB4eFBQrKysrKysrKysUBxQU
        FBQUFBQUFBQUFBQUFBQsHh4hFBQ3KysrKysrFBQUBwchISEhKSkRESdCICYAACweHiEHFBQUFBQUFBQU
        FBQUBwcHBwchISkRJxoMIAAALDgeLyEhBxQUFBQUFBQHBwcHISEHISFEKSkhCkIMAAAsODgKFCEhBwcH
        BwcHBwchIQchISEhISkpFAwfHwwAACwsODgeHh4eHiQkJCQkJCQkJAoKCh8fHx8fCgofJgAAACwsLDge
        Hh4eHh4eHh4eHh4kJCQkJCQkJCQkHwwAAAAAACwsLCwsLCwsODg4FRUVFRUVFRUVFRUVHkEMAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////8AAAA+AAAAHAAAAAwAAAAMAAAADAAAAAwAA
        AAMAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAwAAAAMAAAADAAAAAwAAAAOAAAAHwAAAD/////8=
</value>
  </data>
</root>